// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fieldListener add multiple listeners 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "listeners": Immutable.Map {
    "name": Immutable.List [
      [MockFunction],
      [MockFunction],
    ],
  },
  "lastPath": Array [],
}
`;

exports[`fieldListener addListener sets listener into reducer 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "listeners": Immutable.Map {
    "name": Immutable.List [
      [MockFunction],
    ],
  },
  "lastPath": Array [],
}
`;

exports[`fieldListener removeListener removes by reference 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "previousValue",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "listeners": Immutable.Map {
    "field-name": Immutable.List [
      [MockFunction] {
        "calls": Array [
          Array [
            "i am update",
            "previousValue",
            "current-form-tools",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    ],
  },
  "lastPath": Array [],
}
`;

exports[`getFieldPath combined name with items 1`] = `
Array [
  "data.listField",
  "items",
  "1",
  "fields",
  "fieldName",
]
`;

exports[`getFieldPath list of list with complex names 1`] = `
Array [
  "data.listField",
  "items",
  "0",
  "fields",
  "field1.sub1",
  "items",
  "0",
  "fields",
  "field2.sub2",
]
`;

exports[`getFieldPath list of lists with single names 1`] = `
Array [
  "data.listField",
  "items",
  "0",
  "fields",
  "field1",
  "items",
  "0",
  "fields",
  "field2",
]
`;

exports[`getFieldPath list with combined names 1`] = `
Array [
  "data.listField",
  "items",
  "0",
  "fields",
  "field1.sub1",
]
`;

exports[`getFieldPath single name with items 1`] = `
Array [
  "listField",
  "items",
  "1",
  "fields",
  "fieldName",
]
`;

exports[`getFieldPath single name with items using combined name 1`] = `
Array [
  "listField",
  "items",
  "1",
  "fields",
  "fieldName.sub1",
]
`;

exports[`insertField 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "newField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "one",
      },
      "current": Immutable.Map {
        "value": "one",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "lastPath": Array [],
}
`;

exports[`insertField removes fieldName from removedFields 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "newField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "one",
      },
      "current": Immutable.Map {
        "value": "one",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "removedFields": Immutable.List [],
  "lastPath": Array [],
}
`;

exports[`list in state addListItem 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "",
                "pristine": true,
                "touched": false,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "type": "text",
                "value": "",
                "optional": false,
                "label": "First",
                "field": Immutable.Map {
                  "label": "First",
                  "name": "data.listField.items.0.fields.fieldName",
                },
              },
              "current": Immutable.Map {
                "helperText": "",
                "error": false,
                "pristine": true,
                "touched": false,
                "value": "",
              },
            },
          },
        },
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "lastPath": Array [],
}
`;

exports[`list in state removeListItem 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "lastPath": Array [],
}
`;

exports[`list in state removeListItem 2`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "data.listField": Immutable.Map {
        "items": Immutable.List [
          Immutable.Map {},
        ],
      },
      "otherField": Immutable.Map {
        "initial": Immutable.Map {
          "value": "",
        },
        "current": Immutable.Map {
          "value": "",
          "pristine": true,
          "touched": false,
          "error": false,
          "helperText": "",
        },
      },
    },
  },
  "fields",
  Array [
    "data.listField",
  ],
]
`;

exports[`list in state touched set on current field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "",
                "pristine": true,
                "touched": true,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "lastPath": Array [],
}
`;

exports[`list in state updateListIndex 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "",
                "pristine": true,
                "touched": false,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
        Immutable.Map {},
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "lastPath": Array [],
}
`;

exports[`list in state updateListIndex 2`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "data.listField": Immutable.Map {
        "items": Immutable.List [
          Immutable.Map {
            "fields": Immutable.Map {
              "field-name": Immutable.Map {
                "initial": Immutable.Map {
                  "value": "",
                },
                "current": Immutable.Map {
                  "value": "",
                  "pristine": true,
                  "touched": false,
                  "error": false,
                  "helperText": "",
                },
              },
            },
          },
          Immutable.Map {},
        ],
      },
      "otherField": Immutable.Map {
        "initial": Immutable.Map {
          "value": "",
        },
        "current": Immutable.Map {
          "value": "",
          "pristine": true,
          "touched": false,
          "error": false,
          "helperText": "",
        },
      },
    },
  },
  "fields",
  Array [
    "data.listField",
  ],
]
`;

exports[`list in state updateValue for field updates value on current 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "data.listField": Immutable.Map {
      "items": Immutable.List [
        Immutable.Map {},
        Immutable.Map {
          "fields": Immutable.Map {
            "field-name": Immutable.Map {
              "initial": Immutable.Map {
                "value": "",
              },
              "current": Immutable.Map {
                "value": "new value",
                "pristine": false,
                "touched": false,
                "error": false,
                "helperText": "",
              },
            },
          },
        },
      ],
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "lastPath": Array [],
}
`;

exports[`nested fields updateValue for field updates value on current 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "parent.nested": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "new value",
        "pristine": false,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "lastPath": Array [],
}
`;

exports[`onFormChange is called when present and a function 1`] = `
Array [
  Immutable.Map {
    "field-name": "new value",
    "otherField": "",
  },
]
`;

exports[`pristine is false if value not equal to initial 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "new value",
        "pristine": false,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "lastPath": Array [],
}
`;

exports[`pristine is true if value equal to initial 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "field-name": Immutable.Map {
    "current": Immutable.Map {
      "pristine": false,
    },
  },
  "lastPath": Array [],
}
`;

exports[`removeField 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "removedFields": Immutable.List [
    "field-name",
  ],
  "lastPath": Array [],
}
`;

exports[`touched set on current field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": true,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "lastPath": Array [],
}
`;

exports[`updateValue for field updates value on current 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "new value",
        "pristine": false,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "lastPath": Array [],
}
`;

exports[`validateAll merges validation errors 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": true,
        "helperText": "error 1",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": true,
        "helperText": "error 2",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "lastPath": Array [],
}
`;

exports[`validationResult set on current field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "field-name": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": true,
        "helperText": "i am error",
      },
    },
    "otherField": Immutable.Map {
      "initial": Immutable.Map {
        "value": "",
      },
      "current": Immutable.Map {
        "value": "",
        "pristine": true,
        "touched": false,
        "error": false,
        "helperText": "",
      },
    },
  },
  "formTools": Object {
    "current": "current-form-tools",
  },
  "lastPath": Array [],
}
`;
