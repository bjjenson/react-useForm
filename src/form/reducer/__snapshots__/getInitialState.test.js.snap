// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adds helperText from field config 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "firstValue",
        "optional": false,
        "label": "First",
        "field": Object {
          "helperText": "i am helper",
          "label": "First",
          "name": "first",
        },
      },
      "current": Immutable.Map {
        "helperText": "i am helper",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "firstValue",
      },
    },
    "second": Immutable.Map {
      "initial": Immutable.Map {
        "type": "boolean",
        "value": "secondValue",
        "optional": false,
        "label": "Second",
        "field": Object {
          "label": "Second",
          "name": "second",
          "type": "boolean",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "secondValue",
      },
    },
  },
}
`;

exports[`initialValues boolean 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "boolean",
        "value": false,
        "optional": false,
        "label": undefined,
        "field": Object {
          "name": "first",
          "type": "boolean",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": false,
      },
    },
  },
}
`;

exports[`initialValues field.value should used if set 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "i am field value",
        "optional": false,
        "label": undefined,
        "field": Object {
          "name": "first",
          "type": "text",
          "value": "i am field value",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "i am field value",
      },
    },
  },
}
`;

exports[`initialValues list 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "list",
        "optional": false,
        "label": undefined,
        "field": Object {
          "name": "first",
          "type": "list",
        },
        "options": Object {},
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
      },
      "items": Immutable.List [],
    },
  },
}
`;

exports[`initialValues number 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "number",
        "value": 0,
        "optional": false,
        "label": undefined,
        "field": Object {
          "name": "first",
          "type": "number",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": 0,
      },
    },
  },
}
`;

exports[`initialValues select 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "select",
        "value": "",
        "optional": false,
        "label": undefined,
        "field": Object {
          "name": "first",
          "type": "select",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "",
      },
    },
  },
}
`;

exports[`initialValues text 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "",
        "optional": false,
        "label": undefined,
        "field": Object {
          "name": "first",
          "type": "text",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "",
      },
    },
  },
}
`;

exports[`prepares initialState by field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "firstValue",
        "optional": false,
        "label": "First",
        "field": Object {
          "label": "First",
          "name": "first",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "firstValue",
      },
    },
    "second": Immutable.Map {
      "initial": Immutable.Map {
        "type": "boolean",
        "value": "secondValue",
        "optional": false,
        "label": "Second",
        "field": Object {
          "label": "Second",
          "name": "second",
          "type": "boolean",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "secondValue",
      },
    },
  },
}
`;

exports[`reads initialValues that are nested 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "nested.first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "nestedValue",
        "optional": false,
        "label": "First",
        "field": Object {
          "label": "First",
          "name": "nested.first",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "nestedValue",
      },
    },
  },
}
`;

exports[`sets optional on field 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "firstValue",
        "optional": true,
        "label": "First (optional)",
        "field": Object {
          "label": "First",
          "name": "first",
          "optional": true,
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "firstValue",
      },
    },
    "second": Immutable.Map {
      "initial": Immutable.Map {
        "type": "boolean",
        "value": "secondValue",
        "optional": false,
        "label": "Second",
        "field": Object {
          "label": "Second",
          "name": "second",
          "type": "boolean",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "secondValue",
      },
    },
  },
}
`;

exports[`sets optional on field using custom formatter 1`] = `
Immutable.Map {
  "fields": Immutable.Map {
    "first": Immutable.Map {
      "initial": Immutable.Map {
        "type": "text",
        "value": "firstValue",
        "optional": true,
        "label": "label formatted",
        "field": Object {
          "label": "First",
          "name": "first",
          "optional": true,
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "firstValue",
      },
    },
    "second": Immutable.Map {
      "initial": Immutable.Map {
        "type": "boolean",
        "value": "secondValue",
        "optional": false,
        "label": "Second",
        "field": Object {
          "label": "Second",
          "name": "second",
          "type": "boolean",
        },
      },
      "current": Immutable.Map {
        "helperText": "",
        "error": false,
        "pristine": true,
        "touched": false,
        "value": "secondValue",
      },
    },
  },
}
`;

exports[`sets optional on field using custom formatter 2`] = `
Array [
  "First",
  "first",
]
`;

exports[`throws error if name not provided 1`] = `"name is required on field"`;
