// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`addField 1`] = `
Array [
  Object {
    "name": "newField",
    "type": "list",
  },
  Immutable.Map {
    "nested": Immutable.Map {
      "name": "old name",
    },
    "id": "id",
  },
  Object {},
]
`;

exports[`addField 2`] = `
Array [
  Object {
    "fieldName": "newField",
    "payload": "i am a new field",
    "type": "insertField",
  },
]
`;

exports[`addFieldListener dispatches action 1`] = `
Array [
  Object {
    "fieldName": "formField",
    "payload": "myListener",
    "type": "addListener",
  },
]
`;

exports[`dispatches updateFields from tools.updateFieldDefinition  1`] = `
Array [
  Object {
    "fieldName": "field-name",
    "payload": Object {
      "definition": Object {
        "name": "field-name",
        "optional": true,
      },
      "options": Object {},
    },
    "type": "updateFieldDefinition",
  },
]
`;

exports[`form.validate returns all errors 1`] = `
Object {
  "errors": "pruned errors",
  "isValid": false,
}
`;

exports[`form.validate returns all errors 2`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "name": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The name",
        },
        "current": Immutable.Map {
          "value": "current value of name",
        },
      },
      "phone": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The phone",
        },
        "current": Immutable.Map {
          "value": "current value of phone",
        },
      },
    },
  },
  Object {
    "name": Object {
      "props": Object {
        "label": "The name",
        "value": "current value of name",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
    "phone": Object {
      "props": Object {
        "label": "The phone",
        "value": "current value of phone",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
  },
  Array [
    "i validate forms",
    "as do i",
  ],
  [Function],
]
`;

exports[`form.validate returns all errors 3`] = `
Array [
  Object {
    "payload": Object {
      "obj": "containing errors",
    },
    "type": "validateAll",
  },
]
`;

exports[`getValuesIfFormValid returns null if not valid 1`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "name": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The name",
        },
        "current": Immutable.Map {
          "value": "current value of name",
        },
      },
      "phone": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The phone",
        },
        "current": Immutable.Map {
          "value": "current value of phone",
        },
      },
    },
  },
  Object {
    "name": Object {
      "props": Object {
        "label": "The name",
        "value": "current value of name",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
    "phone": Object {
      "props": Object {
        "label": "The phone",
        "value": "current value of phone",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
  },
  "i validate forms",
  [Function],
]
`;

exports[`getValuesIfFormValid returns null if not valid 2`] = `
Array [
  Object {
    "obj": "containing errors",
  },
]
`;

exports[`getValuesIfFormValid returns values if form is valid  1`] = `"merged form values"`;

exports[`no submit if validation fails 1`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "name": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The name",
        },
        "current": Immutable.Map {
          "value": "current value of name",
        },
      },
      "phone": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The phone",
        },
        "current": Immutable.Map {
          "value": "current value of phone",
        },
      },
    },
  },
  Object {
    "name": Object {
      "props": Object {
        "label": "The name",
        "value": "current value of name",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
    "phone": Object {
      "props": Object {
        "label": "The phone",
        "value": "current value of phone",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
  },
  [MockFunction],
  [Function],
]
`;

exports[`no submit if validation fails 2`] = `
Array [
  Object {
    "obj": "containing errors",
  },
]
`;

exports[`no submit if validation fails 3`] = `
Array [
  Object {
    "payload": Object {
      "obj": "containing errors",
    },
    "type": "validateAll",
  },
]
`;

exports[`options passed to createReducer 1`] = `
Array [
  Object {
    "fields": Array [
      Object {
        "label": "The name",
        "name": "name",
        "type": "text",
      },
      Object {
        "label": "The phone",
        "name": "phone",
        "type": "text",
      },
    ],
    "formTools": Object {
      "current": Object {
        "addField": [Function],
        "addFieldListener": [Function],
        "getFields": [Function],
        "getValues": [Function],
        "removeField": [Function],
        "removeFieldListener": [Function],
        "setValue": [Function],
        "updateFieldDefinition": [Function],
      },
    },
    "initialValues": Immutable.Map {},
    "options": Object {
      "optional": "yes",
    },
  },
]
`;

exports[`removeFieldListener dispatches action 1`] = `
Array [
  Object {
    "fieldName": "formField",
    "payload": "myListener",
    "type": "removeListener",
  },
]
`;

exports[`reset dispatches action with derived initial state 1`] = `
Array [
  Array [
    Object {
      "label": "The name",
      "name": "name",
      "type": "text",
    },
    Object {
      "label": "The phone",
      "name": "phone",
      "type": "text",
    },
  ],
  Immutable.Map {
    "nested": Immutable.Map {
      "name": "old name",
    },
    "id": "id",
  },
  Object {},
  Object {
    "current": Object {
      "addField": [Function],
      "addFieldListener": [Function],
      "getFields": [Function],
      "getValues": [Function],
      "removeField": [Function],
      "removeFieldListener": [Function],
      "setValue": [Function],
      "updateFieldDefinition": [Function],
    },
  },
]
`;

exports[`reset dispatches action with derived initial state 2`] = `
Array [
  Object {
    "payload": "derived-initial-state",
    "type": "reset",
  },
]
`;

exports[`returns array of form props 1`] = `
Array [
  Object {
    "name": Object {
      "id": "name",
      "label": "The name",
      "value": "current value of name",
    },
    "phone": Object {
      "id": "phone",
      "label": "The phone",
      "value": "current value of phone",
    },
  },
  Object {
    "Form": [Function],
    "addField": [Function],
    "addFieldListener": [Function],
    "getAnyTouched": [Function],
    "getIsPristine": [Function],
    "getValues": [Function],
    "getValuesIfFormValid": [Function],
    "id": "",
    "removeField": [Function],
    "removeFieldListener": [Function],
    "reset": [Function],
    "setValue": [Function],
    "submit": [Function],
    "updateFieldDefinition": [Function],
    "validate": [Function],
  },
]
`;

exports[`submit with skipValidation must be a boolean 1`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "name": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The name",
        },
        "current": Immutable.Map {
          "value": "current value of name",
        },
      },
      "phone": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The phone",
        },
        "current": Immutable.Map {
          "value": "current value of phone",
        },
      },
    },
  },
  Object {
    "name": Object {
      "props": Object {
        "label": "The name",
        "value": "current value of name",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
    "phone": Object {
      "props": Object {
        "label": "The phone",
        "value": "current value of phone",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
  },
  "i validate forms",
  [Function],
]
`;

exports[`valid form submits values  1`] = `
Array [
  "merged form values",
]
`;

exports[`valid form submits values  2`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "nested.name": Immutable.Map {
        "initial": Immutable.Map {
          "type": undefined,
          "label": undefined,
        },
        "current": Immutable.Map {
          "value": "current value of nested.name",
        },
      },
      "phone": Immutable.Map {
        "initial": Immutable.Map {
          "type": undefined,
          "label": undefined,
        },
        "current": Immutable.Map {
          "value": "current value of phone",
        },
      },
    },
  },
  Immutable.Map {
    "nested": Immutable.Map {
      "name": "old name",
    },
    "id": "id",
  },
]
`;

exports[`valid form submits values  3`] = `
Array [
  Object {
    "payload": Object {
      "obj": "containing errors",
    },
    "type": "validateAll",
  },
]
`;

exports[`validate can be an array of validators 1`] = `
Array [
  Immutable.Map {
    "fields": Immutable.Map {
      "name": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The name",
        },
        "current": Immutable.Map {
          "value": "current value of name",
        },
      },
      "phone": Immutable.Map {
        "initial": Immutable.Map {
          "type": "text",
          "label": "The phone",
        },
        "current": Immutable.Map {
          "value": "current value of phone",
        },
      },
    },
  },
  Object {
    "name": Object {
      "props": Object {
        "label": "The name",
        "value": "current value of name",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
    "phone": Object {
      "props": Object {
        "label": "The phone",
        "value": "current value of phone",
      },
      "setValidationResult": [MockFunction],
      "setValue": [MockFunction],
      "validate": [MockFunction],
    },
  },
  Array [
    "i validate forms",
    "as do i",
  ],
  [Function],
]
`;
